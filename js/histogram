var width;
var height;
var margin;
function load_histogram(div_name, data, title) {
    // set the dimensions and margins of the graph
    margin = { top: 40, right: 2, bottom: 50, left: 55 },
    width = 950;
    height = 800;

    const COLOR_PALETTE = ["#68FF42", "#FFFF54", "#EF8432", "#EA3323",
                                "#8C1A4B", "#8C1A4B", "#721324", "#721324",
                                "#721324", "#721324"];

    // append the svg object to the body of the page
    var svg = d3.select(div_name)
        .append("svg")
        .attr("viewBox", [0, 0, width + margin.left + margin.right, height + margin.top + margin.bottom])
        .append("g")
        .attr("transform",
            "translate(" + margin.left + "," + margin.top + ")");



    let y_max = -1;
    let y_min = Infinity;
    for (i = 0; i < data.length; i++) {
        y_max = Math.max(y_max, data[i].update_freq);
        y_min = Math.min(y_min, data[i].update_freq);
    }

    // X axis: scale and draw:
    var y = d3.scaleLog()
        .domain([1, y_max])     // can use this instead of 1000 to have the max of data: d3.max(data, function(d) { return +d.price })
        .range([height, 0]);

    const yAxisG = svg.append("g")
                        .attr("transform", "translate(0," + 0 + ")")
                        .call(d3.axisLeft(y).ticks(10).tickValues(y.ticks()).tickFormat(d3.format(".0s")));

    yAxisG.append("text")
        .text("Number of updated lines")
        .attr("class", "axis-label")
        .attr("fill", "black")
        .attr("x", -height/3)
        .attr("y", -35)
        .attr("transform", "rotate(-90)");

    // set the parameters for the histogram
    var histogram = d3.histogram()
        .value(function (d) { return d.update_freq; })   // I need to give the vector of value
        .domain(y.domain())  // then the domain of the graphic
        .thresholds(y.ticks(10)); // then the numbers of bins

    // And apply this function to data to get the bins
    var bins = histogram(data);

    length_arr = [];

    bins.forEach((item =>{
        if (item.length > 0)
            length_arr.push(item.length);}))
    
    length_arr.sort(function(a, b){return a - b});
    
    color = d3.scaleOrdinal()
                .domain(length_arr)
                .range(COLOR_PALETTE);

    // Y axis: scale and draw:
    var x = d3.scaleLinear()
                .range([0, width - 10]);
    x.domain([0, d3.max(bins, function (d) { return d.length; })]);   // d3.hist has to be called before the Y axis obviously
    xAxisG = svg.append("g")
                .attr("transform", "translate(" + 0  +"," + height + ")")
                .call(d3.axisBottom(x));

    
    xAxisG.append("text")
        .text("Number of files")
        .attr("class", "axis-label")
        .attr("fill", "black")
        .attr("y", 40)
        .attr("x", width / 2);

    // append the bar rectangles to the svg element
    svg.selectAll("rect")
        .data(bins)
        .enter()
        .append("rect")
        .attr("x", 0)
        .attr("transform", function (d) { return "translate(" + 0 + "," + y(d.x1) + ")"; })
        .attr("width", function (d) { return  x(d.length); })
        .attr("height", function (d) { return y(d.x0) - y(d.x1); })
        .style("fill", function (d) { return color(d.length);})
        .style("opacity", 0.8)
        .style("stroke", "black")
        .on("mouseover", function() {
            d3.select(this)
                .style("opacity", 1);
        })
        .on("mouseout", function(d) {
            d3.select(this)
                .style("opacity", 0.8);
        })
        .on("click", function(d) {
            document.getElementById("displayedFilesListHeader").innerHTML = "Files with 1 - " + d.x1 + " lines of updates";
            document.getElementById("otherFilesListHeader").innerHTML = "Files with more than " + d.x1 + " lines of updates";
            selectedUpdateFreq(d.x0, d.x1);
        })
        .append("title")
        .text(function (d) {
            return d.length + " files have been updated " + d.x0 + "-" +d.x1 + " times";
        })

}
